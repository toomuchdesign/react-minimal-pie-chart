// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dist bundle is unchanged 1`] = `
"(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types'], factory) :
  (global = global || self, factory(global.ReactMinimalPieChart = {}, global.React, global.PropTypes));
}(this, (function (exports, React, PropTypes) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  var stylePropType = PropTypes.objectOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]));
  var dataPropType = PropTypes.arrayOf(PropTypes.shape({
    title: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    value: PropTypes.number.isRequired,
    color: PropTypes.string,
    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    style: stylePropType
  }));

  function degreesToRadians(degrees) {
    return degrees * Math.PI / 180;
  }
  function evaluateLabelTextAnchor(_ref) {
    var labelPosition = _ref.labelPosition,
        lineWidth = _ref.lineWidth,
        labelHorizontalShift = _ref.labelHorizontalShift;

    // Label in the vertical center
    if (labelHorizontalShift === 0) {
      return 'middle';
    } // Outward label


    if (labelPosition > 100) {
      return labelHorizontalShift > 0 ? 'start' : 'end';
    } // Inward label


    var innerRadius = 100 - lineWidth;

    if (labelPosition < innerRadius) {
      return labelHorizontalShift > 0 ? 'end' : 'start';
    } // Overlying label


    return 'middle';
  }
  function valueBetween(value, min, max) {
    if (value > max) return max;
    if (value < min) return min;
    return value;
  }
  function extractPercentage(value, percentage) {
    return value * percentage / 100;
  }
  function extractAbsoluteCoordinates(props) {
    var _props$viewBoxSize = props.viewBoxSize,
        viewBoxWidth = _props$viewBoxSize[0],
        viewBoxHeight = _props$viewBoxSize[1];
    return {
      cx: extractPercentage(props.cx, viewBoxWidth),
      cy: extractPercentage(props.cy, viewBoxHeight),
      radius: extractPercentage(props.radius, viewBoxWidth)
    };
  }

  function sumValues(data) {
    return data.reduce(function (acc, dataEntry) {
      return acc + dataEntry.value;
    }, 0);
  } // Append \\"percentage\\", \\"degrees\\" and \\"startOffset\\" into each data entry


  function extendData(_ref) {
    var data = _ref.data,
        totalAngle = _ref.lengthAngle,
        totalValue = _ref.totalValue,
        paddingAngle = _ref.paddingAngle;
    var total = totalValue || sumValues(data);
    var normalizedTotalAngle = valueBetween(totalAngle, -360, 360);
    var numberOfPaddings = Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;
    var singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);
    var degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;
    var degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;
    var lastSegmentEnd = 0; // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?

    return data.map(function (dataEntry) {
      var valueInPercentage = total === 0 ? 0 : dataEntry.value / total * 100;
      var degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);
      var startOffset = lastSegmentEnd;
      lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;
      return _extends({
        percentage: valueInPercentage,
        degrees: degrees,
        startOffset: startOffset
      }, dataEntry);
    });
  }

  function ReactMinimalPieChartLabel(_ref) {
    var data = _ref.data,
        dataIndex = _ref.dataIndex,
        color = _ref.color,
        props = _objectWithoutPropertiesLoose(_ref, [\\"data\\", \\"dataIndex\\", \\"color\\"]);

    return /*#__PURE__*/React__default.createElement(\\"text\\", _extends({
      textAnchor: \\"middle\\",
      dominantBaseline: \\"middle\\",
      fill: color
    }, props));
  }
  ReactMinimalPieChartLabel.displayName = 'ReactMinimalPieChartLabel';

  function renderLabelItem(option, labelProps, value) {
    if (React__default.isValidElement(option)) {
      return React__default.cloneElement(option, labelProps);
    }

    var label = value;

    if (typeof option === 'function') {
      label = option(labelProps);

      if (React__default.isValidElement(label)) {
        return label;
      }
    }

    return /*#__PURE__*/React__default.createElement(ReactMinimalPieChartLabel, labelProps, label);
  }

  function renderLabels(data, props) {
    var _extractAbsoluteCoord = extractAbsoluteCoordinates(props),
        cx = _extractAbsoluteCoord.cx,
        cy = _extractAbsoluteCoord.cy,
        radius = _extractAbsoluteCoord.radius;

    var labelPosition = extractPercentage(radius, props.labelPosition);
    return data.map(function (dataEntry, index) {
      var startAngle = props.startAngle + dataEntry.startOffset;
      var halfAngle = startAngle + dataEntry.degrees / 2;
      var halfAngleRadians = degreesToRadians(halfAngle);
      var dx = Math.cos(halfAngleRadians) * labelPosition;
      var dy = Math.sin(halfAngleRadians) * labelPosition; // This object is passed as props to the \\"label\\" component

      var labelProps = {
        key: \\"label-\\" + (dataEntry.key || index),
        x: cx,
        y: cy,
        dx: dx,
        dy: dy,
        textAnchor: evaluateLabelTextAnchor({
          lineWidth: props.lineWidth,
          labelPosition: props.labelPosition,
          labelHorizontalShift: dx
        }),
        data: data,
        dataIndex: index,
        color: dataEntry.color,
        style: props.labelStyle
      };
      return renderLabelItem(props.label, labelProps, dataEntry.value);
    });
  }

  var partialCircle = function partialCircle(cx, cy, r, start, end) {
    var length = end - start;
    if (length === 0) return [];
    var fromX = r * Math.cos(start) + cx;
    var fromY = r * Math.sin(start) + cy;
    var toX = r * Math.cos(end) + cx;
    var toY = r * Math.sin(end) + cy;
    var large = Math.abs(length) <= Math.PI ? '0' : '1';
    var sweep = length < 0 ? '0' : '1';
    return [['M', fromX, fromY], ['A', r, r, 0, large, sweep, toX, toY]];
  };

  var svgPartialCircle = partialCircle;

  function makePathCommands(cx, cy, startAngle, lengthAngle, radius) {
    var patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);
    return svgPartialCircle(cx, cy, // center X and Y
    radius, degreesToRadians(startAngle), degreesToRadians(startAngle + patchedLengthAngle)).map(function (command) {
      return command.join(' ');
    }).join(' ');
  }

  function ReactMinimalPieChartPath(_ref) {
    var cx = _ref.cx,
        cy = _ref.cy,
        startAngle = _ref.startAngle,
        lengthAngle = _ref.lengthAngle,
        radius = _ref.radius,
        lineWidth = _ref.lineWidth,
        reveal = _ref.reveal,
        title = _ref.title,
        props = _objectWithoutPropertiesLoose(_ref, [\\"cx\\", \\"cy\\", \\"startAngle\\", \\"lengthAngle\\", \\"radius\\", \\"lineWidth\\", \\"reveal\\", \\"title\\"]);

    var actualRadio = radius - lineWidth / 2;
    var pathCommands = makePathCommands(cx, cy, startAngle, lengthAngle, actualRadio);
    var strokeDasharray;
    var strokeDashoffset; // Animate/hide paths with \\"stroke-dasharray\\" + \\"stroke-dashoffset\\"
    // https://css-tricks.com/svg-line-animation-works/

    if (typeof reveal === 'number') {
      var pathLength = degreesToRadians(actualRadio) * lengthAngle;
      strokeDasharray = Math.abs(pathLength);
      strokeDashoffset = strokeDasharray - extractPercentage(strokeDasharray, reveal);
    }

    return /*#__PURE__*/React__default.createElement(\\"path\\", _extends({
      d: pathCommands,
      strokeWidth: lineWidth,
      strokeDasharray: strokeDasharray,
      strokeDashoffset: strokeDashoffset
    }, props), title && /*#__PURE__*/React__default.createElement(\\"title\\", null, title));
  }
  ReactMinimalPieChartPath.displayName = 'ReactMinimalPieChartPath';

  function makeSegmentTransitionStyle(duration, easing, furtherStyles) {
    if (furtherStyles === void 0) {
      furtherStyles = {};
    }

    // Merge CSS transition necessary for chart animation with the ones provided by \\"segmentsStyle\\"
    var transition = [\\"stroke-dashoffset \\" + duration + \\"ms \\" + easing, furtherStyles.transition].filter(Boolean).join(',');
    return {
      transition: transition
    };
  }

  function renderSegments(data, props, hide) {
    if (hide === void 0) {
      hide = false;
    }

    var style = props.segmentsStyle;

    if (props.animate) {
      var transitionStyle = makeSegmentTransitionStyle(props.animationDuration, props.animationEasing, style);
      style = Object.assign({}, style, transitionStyle);
    } // Hide/reveal the segment?


    var reveal;

    if (hide === true) {
      reveal = 0;
    } else if (typeof props.reveal === 'number') {
      reveal = props.reveal;
    } else if (hide === false) {
      reveal = 100;
    }

    var _extractAbsoluteCoord = extractAbsoluteCoordinates(props),
        cx = _extractAbsoluteCoord.cx,
        cy = _extractAbsoluteCoord.cy,
        radius = _extractAbsoluteCoord.radius;

    var lineWidth = extractPercentage(radius, props.lineWidth);
    var paths = data.map(function (dataEntry, index) {
      var startAngle = props.startAngle + dataEntry.startOffset;
      return /*#__PURE__*/React__default.createElement(ReactMinimalPieChartPath, {
        key: dataEntry.key || index,
        cx: cx,
        cy: cy,
        startAngle: startAngle,
        lengthAngle: dataEntry.degrees,
        radius: radius,
        lineWidth: lineWidth,
        reveal: reveal,
        title: dataEntry.title,
        style: Object.assign({}, style, dataEntry.style),
        stroke: dataEntry.color,
        strokeLinecap: props.rounded ? 'round' : undefined,
        fill: \\"none\\",
        onMouseOver: props.onMouseOver && // @ts-ignore
        function (e) {
          return props.onMouseOver(e, props.data, index);
        },
        onMouseOut: props.onMouseOut && // @ts-ignore
        function (e) {
          return props.onMouseOut(e, props.data, index);
        },
        onClick: props.onClick && // @ts-ignore
        function (e) {
          return props.onClick(e, props.data, index);
        }
      });
    });

    if (props.background) {
      paths.unshift( /*#__PURE__*/React__default.createElement(ReactMinimalPieChartPath, {
        key: \\"bg\\",
        cx: cx,
        cy: cy,
        startAngle: props.startAngle,
        lengthAngle: props.lengthAngle,
        radius: radius,
        lineWidth: lineWidth,
        stroke: props.background,
        strokeLinecap: props.rounded ? 'round' : undefined,
        fill: \\"none\\"
      }));
    }

    return paths;
  }

  var ReactMinimalPieChart = /*#__PURE__*/function (_Component) {
    _inheritsLoose(ReactMinimalPieChart, _Component);

    function ReactMinimalPieChart(props) {
      var _this;

      _this = _Component.call(this, props) || this;
      _this.hideSegments = false;
      _this.initialAnimationTimerId = void 0;
      _this.initialAnimationRAFId = void 0;

      if (props.animate === true) {
        _this.hideSegments = true;
      }

      return _this;
    }

    var _proto = ReactMinimalPieChart.prototype;

    _proto.componentDidMount = function componentDidMount() {
      var _this2 = this;

      if (this.props.animate === true && requestAnimationFrame) {
        this.initialAnimationTimerId = setTimeout(function () {
          _this2.initialAnimationTimerId = null;
          _this2.initialAnimationRAFId = requestAnimationFrame(function () {
            _this2.initialAnimationRAFId = null;

            _this2.startAnimation();
          });
        });
      }
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.initialAnimationTimerId) {
        clearTimeout(this.initialAnimationTimerId);
      }

      if (this.initialAnimationRAFId) {
        cancelAnimationFrame(this.initialAnimationRAFId);
      }
    };

    _proto.startAnimation = function startAnimation() {
      this.hideSegments = false;
      this.forceUpdate();
    };

    _proto.render = function render() {
      var props = this.props;

      if (props.data === undefined) {
        return null;
      }

      var extendedData = extendData(props);
      return /*#__PURE__*/React__default.createElement(\\"div\\", {
        className: props.className,
        style: props.style
      }, /*#__PURE__*/React__default.createElement(\\"svg\\", {
        viewBox: \\"0 0 \\" + props.viewBoxSize[0] + \\" \\" + props.viewBoxSize[1],
        width: \\"100%\\",
        height: \\"100%\\",
        style: {
          display: 'block'
        }
      }, renderSegments(extendedData, props, this.hideSegments), props.label && renderLabels(extendedData, props), props.injectSvg && props.injectSvg()), props.children);
    };

    return ReactMinimalPieChart;
  }(React.Component);

  ReactMinimalPieChart.displayName = 'ReactMinimalPieChart';
  ReactMinimalPieChart.defaultProps = {
    animate: false,
    animationDuration: 500,
    animationEasing: 'ease-out',
    cx: 50,
    cy: 50,
    label: false,
    labelPosition: 50,
    lengthAngle: 360,
    lineWidth: 100,
    paddingAngle: 0,
    radius: 50,
    rounded: false,
    startAngle: 0,
    viewBoxSize: [100, 100]
  };
  ReactMinimalPieChart.propTypes = {
    animate: PropTypes.bool,
    animationDuration: PropTypes.number,
    animationEasing: PropTypes.string,
    background: PropTypes.string,
    children: PropTypes.node,
    className: PropTypes.string,
    cx: PropTypes.number,
    cy: PropTypes.number,
    data: dataPropType,
    injectSvg: PropTypes.func,
    label: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.bool]),
    labelPosition: PropTypes.number,
    labelStyle: stylePropType,
    lengthAngle: PropTypes.number,
    lineWidth: PropTypes.number,
    onClick: PropTypes.func,
    onMouseOut: PropTypes.func,
    onMouseOver: PropTypes.func,
    paddingAngle: PropTypes.number,
    radius: PropTypes.number,
    reveal: PropTypes.number,
    rounded: PropTypes.bool,
    segmentsStyle: stylePropType,
    startAngle: PropTypes.number,
    style: stylePropType,
    totalValue: PropTypes.number,
    viewBoxSize: PropTypes.arrayOf(PropTypes.number)
  };

  exports.default = ReactMinimalPieChart;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.js.map
"
`;
