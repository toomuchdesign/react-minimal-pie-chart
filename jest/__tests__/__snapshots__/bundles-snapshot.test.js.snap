// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dist bundle is unchanged 1`] = `
"(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactMinimalPieChart = {}, global.React));
})(this, (function (exports, React) { 'use strict';

  function degreesToRadians(degrees) {
    return degrees * Math.PI / 180;
  }
  function valueBetween(value, min, max) {
    if (value > max) return max;
    if (value < min) return min;
    return value;
  }
  function extractPercentage(value, percentage) {
    return percentage / 100 * value;
  }
  function bisectorAngle(startAngle, lengthAngle) {
    return startAngle + lengthAngle / 2;
  }
  function shiftVectorAlongAngle(angle, distance) {
    var angleRadians = degreesToRadians(angle);
    return {
      dx: distance * Math.cos(angleRadians),
      dy: distance * Math.sin(angleRadians)
    };
  }
  function isNumber(value) {
    return typeof value === 'number';
  }

  /**
   * Conditionally return a prop or a function prop result
   */
  function functionProp(prop, payload) {
    return typeof prop === 'function' ?
    // @ts-expect-error: cannot find a way to type 2nd prop arg as anything-but-function
    prop(payload) : prop;
  }

  function sumValues(data) {
    var sum = 0;
    for (var i = 0; i < data.length; i++) {
      sum += data[i].value;
    }
    return sum;
  }

  // Append "percentage", "degrees" and "startAngle" to each data entry
  function extendData(_ref) {
    var data = _ref.data,
      totalAngle = _ref.lengthAngle,
      totalValue = _ref.totalValue,
      paddingAngle = _ref.paddingAngle,
      chartStartAngle = _ref.startAngle;
    var total = totalValue || sumValues(data);
    var normalizedTotalAngle = valueBetween(totalAngle, -360, 360);
    var numberOfPaddings = Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;
    var singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);
    var degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;
    var degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;
    var lastSegmentEnd = 0;
    var extendedData = [];

    // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?
    for (var i = 0; i < data.length; i++) {
      var dataEntry = data[i];
      var valueInPercentage = total === 0 ? 0 : dataEntry.value / total * 100;
      var degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);
      var startAngle = lastSegmentEnd + chartStartAngle;
      lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;
      extendedData.push(Object.assign({
        percentage: valueInPercentage,
        startAngle: startAngle,
        degrees: degrees
      }, dataEntry));
    }
    return extendedData;
  }

  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (e.includes(n)) continue;
      t[n] = r[n];
    }
    return t;
  }

  var _excluded$1 = ["dataEntry", "dataIndex"];
  function ReactMinimalPieChartLabel(_ref) {
    var renderLabel = _ref.renderLabel,
      labelProps = _ref.labelProps;
    var label = renderLabel(labelProps);

    // Default label
    if (typeof label === 'string' || typeof label === 'number') {
      labelProps.dataEntry;
        labelProps.dataIndex;
        var props = _objectWithoutPropertiesLoose(labelProps, _excluded$1);
      return /*#__PURE__*/React.createElement("text", Object.assign({
        dominantBaseline: "central"
      }, props), label);
    }
    if (React.isValidElement(label)) {
      return label;
    }
    return null;
  }

  function round(number) {
    var divisor = 1e14; // 14 decimals
    return Math.round((number + Number.EPSILON) * divisor) / divisor;
  }
  function evaluateTextAnchorPosition(_ref) {
    var labelPosition = _ref.labelPosition,
      lineWidth = _ref.lineWidth,
      labelHorizontalShift = _ref.labelHorizontalShift;
    var dx = round(labelHorizontalShift);
    // Label in the vertical center
    if (dx === 0) {
      return 'middle';
    }
    // Outward label
    if (labelPosition > 100) {
      return dx > 0 ? 'start' : 'end';
    }
    // Inward label
    var innerRadius = 100 - lineWidth;
    if (labelPosition < innerRadius) {
      return dx > 0 ? 'end' : 'start';
    }
    // Overlying label
    return 'middle';
  }
  function makeLabelRenderProps(data, props) {
    return data.map(function (dataEntry, index) {
      var _functionProp;
      var segmentsShift = (_functionProp = functionProp(props.segmentsShift, index)) != null ? _functionProp : 0;
      var distanceFromCenter = extractPercentage(props.radius, props.labelPosition) + segmentsShift;
      var _shiftVectorAlongAngl = shiftVectorAlongAngle(bisectorAngle(dataEntry.startAngle, dataEntry.degrees), distanceFromCenter),
        dx = _shiftVectorAlongAngl.dx,
        dy = _shiftVectorAlongAngl.dy;

      // This object is passed as argument to the "label" function prop
      var labelRenderProps = {
        x: props.center[0],
        y: props.center[1],
        dx: dx,
        dy: dy,
        textAnchor: evaluateTextAnchorPosition({
          labelPosition: props.labelPosition,
          lineWidth: props.lineWidth,
          labelHorizontalShift: dx
        }),
        dataEntry: dataEntry,
        dataIndex: index,
        style: functionProp(props.labelStyle, index)
      };
      return labelRenderProps;
    });
  }
  function renderLabels(data, props) {
    var label = props.label;
    if (label) {
      return makeLabelRenderProps(data, props).map(function (labelRenderProps, index) {
        return /*#__PURE__*/React.createElement(ReactMinimalPieChartLabel, {
          key: "label-" + (labelRenderProps.dataEntry.key || index),
          renderLabel: label,
          labelProps: labelRenderProps
        });
      });
    }
  }

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var svgPartialCircle;
  var hasRequiredSvgPartialCircle;

  function requireSvgPartialCircle () {
  	if (hasRequiredSvgPartialCircle) return svgPartialCircle;
  	hasRequiredSvgPartialCircle = 1;

  	// from http://stackoverflow.com/a/18473154
  	var partialCircle = function partialCircle(cx, cy, r, start, end) {
  	  var length = end - start;
  	  if (length === 0) return [];
  	  var fromX = r * Math.cos(start) + cx;
  	  var fromY = r * Math.sin(start) + cy;
  	  var toX = r * Math.cos(end) + cx;
  	  var toY = r * Math.sin(end) + cy;
  	  var large = Math.abs(length) <= Math.PI ? '0' : '1';
  	  var sweep = length < 0 ? '0' : '1';
  	  return [['M', fromX, fromY], ['A', r, r, 0, large, sweep, toX, toY]];
  	};
  	svgPartialCircle = partialCircle;
  	return svgPartialCircle;
  }

  var svgPartialCircleExports = requireSvgPartialCircle();
  var partialCircle = /*@__PURE__*/getDefaultExportFromCjs(svgPartialCircleExports);

  var _excluded = ["cx", "cy", "lengthAngle", "lineWidth", "radius", "shift", "reveal", "rounded", "startAngle", "title"];
  function makePathCommands(cx, cy, startAngle, lengthAngle, radius) {
    var patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);
    return partialCircle(cx, cy,
    // center X and Y
    radius, degreesToRadians(startAngle), degreesToRadians(startAngle + patchedLengthAngle)).map(function (command) {
      return command.join(' ');
    }).join(' ');
  }
  function ReactMinimalPieChartPath(_ref) {
    var cx = _ref.cx,
      cy = _ref.cy,
      lengthAngle = _ref.lengthAngle,
      lineWidth = _ref.lineWidth,
      radius = _ref.radius,
      _ref$shift = _ref.shift,
      shift = _ref$shift === void 0 ? 0 : _ref$shift,
      reveal = _ref.reveal,
      rounded = _ref.rounded,
      startAngle = _ref.startAngle,
      title = _ref.title,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);
    var pathRadius = radius - lineWidth / 2;
    //@NOTE This shift might be rendered as a translation in future
    var _shiftVectorAlongAngl = shiftVectorAlongAngle(bisectorAngle(startAngle, lengthAngle), shift),
      dx = _shiftVectorAlongAngl.dx,
      dy = _shiftVectorAlongAngl.dy;
    var pathCommands = makePathCommands(cx + dx, cy + dy, startAngle, lengthAngle, pathRadius);
    var strokeDasharray;
    var strokeDashoffset;

    // Animate/hide paths with "stroke-dasharray" + "stroke-dashoffset"
    // https://css-tricks.com/svg-line-animation-works/
    if (isNumber(reveal)) {
      var pathLength = degreesToRadians(pathRadius) * lengthAngle;
      strokeDasharray = Math.abs(pathLength);
      strokeDashoffset = strokeDasharray - extractPercentage(strokeDasharray, reveal);
    }
    return /*#__PURE__*/React.createElement("path", Object.assign({
      d: pathCommands,
      fill: "none",
      strokeWidth: lineWidth,
      strokeDasharray: strokeDasharray,
      strokeDashoffset: strokeDashoffset,
      strokeLinecap: rounded ? 'round' : undefined
    }, props), title && /*#__PURE__*/React.createElement("title", null, title));
  }

  function combineSegmentTransitionsStyle(duration, easing, customStyle) {
    // Merge chart's animation CSS transition with "transition" found to customStyle
    var transition = "stroke-dashoffset " + duration + "ms " + easing;
    if (customStyle && customStyle.transition) {
      transition = transition + "," + customStyle.transition;
    }
    return {
      transition: transition
    };
  }
  function getRevealValue(_ref) {
    var reveal = _ref.reveal,
      animate = _ref.animate;
    //@NOTE When animation is on, chart has to be fully revealed when reveal is not set
    if (animate && !isNumber(reveal)) {
      return 100;
    }
    return reveal;
  }
  function makeEventHandler(eventHandler, payload) {
    return eventHandler && function (e) {
      eventHandler(e, payload);
    };
  }
  function renderSegments(data, props, revealOverride) {
    // @NOTE this should go in Path component. Here for performance reasons
    var reveal = revealOverride != null ? revealOverride : getRevealValue(props);
    var radius = props.radius,
      _props$center = props.center,
      cx = _props$center[0],
      cy = _props$center[1];
    var lineWidth = extractPercentage(radius, props.lineWidth);
    var paths = data.map(function (dataEntry, index) {
      var segmentsStyle = functionProp(props.segmentsStyle, index);
      return /*#__PURE__*/React.createElement(ReactMinimalPieChartPath, {
        cx: cx,
        cy: cy,
        key: dataEntry.key || index,
        lengthAngle: dataEntry.degrees,
        lineWidth: lineWidth,
        radius: radius,
        rounded: props.rounded,
        reveal: reveal,
        shift: functionProp(props.segmentsShift, index),
        startAngle: dataEntry.startAngle,
        title: dataEntry.title,
        style: Object.assign({}, segmentsStyle, props.animate && combineSegmentTransitionsStyle(props.animationDuration, props.animationEasing, segmentsStyle)),
        stroke: dataEntry.color,
        tabIndex: props.segmentsTabIndex,
        onBlur: makeEventHandler(props.onBlur, index),
        onClick: makeEventHandler(props.onClick, index),
        onFocus: makeEventHandler(props.onFocus, index),
        onKeyDown: makeEventHandler(props.onKeyDown, index),
        onMouseOver: makeEventHandler(props.onMouseOver, index),
        onMouseOut: makeEventHandler(props.onMouseOut, index)
      });
    });
    if (props.background) {
      paths.unshift(/*#__PURE__*/React.createElement(ReactMinimalPieChartPath, {
        cx: cx,
        cy: cy,
        key: "bg",
        lengthAngle: props.lengthAngle,
        lineWidth: lineWidth,
        radius: radius,
        rounded: props.rounded,
        startAngle: props.startAngle,
        stroke: props.background
      }));
    }
    return paths;
  }

  var defaultProps = {
    animationDuration: 500,
    animationEasing: 'ease-out',
    center: [50, 50],
    data: [],
    labelPosition: 50,
    lengthAngle: 360,
    lineWidth: 100,
    paddingAngle: 0,
    radius: 50,
    startAngle: 0,
    viewBoxSize: [100, 100]
  };
  function makePropsWithDefaults(props) {
    var result = Object.assign({}, defaultProps, props);

    // @NOTE Object.assign doesn't default properties with undefined value (like React defaultProps does)
    var key;
    for (key in defaultProps) {
      if (props[key] === undefined) {
        // @ts-expect-error: TS cannot ensure we're assigning the expected props accross abjects
        result[key] = defaultProps[key];
      }
    }
    return result;
  }
  function ReactMinimalPieChart(originalProps) {
    var props = makePropsWithDefaults(originalProps);
    var _useState = React.useState(props.animate ? 0 : null),
      revealOverride = _useState[0],
      setRevealOverride = _useState[1];
    React.useEffect(function () {
      if (props.animate) {
        // Trigger initial animation
        setRevealOverride(null);
      }
    }, []);
    var extendedData = extendData(props);
    return /*#__PURE__*/React.createElement("svg", {
      viewBox: "0 0 " + props.viewBoxSize[0] + " " + props.viewBoxSize[1],
      width: "100%",
      height: "100%",
      className: props.className,
      style: props.style
    }, renderSegments(extendedData, props, revealOverride), renderLabels(extendedData, props), props.children);
  }

  exports.PieChart = ReactMinimalPieChart;
  exports.pieChartDefaultProps = defaultProps;

}));
//# sourceMappingURL=index.js.map
"
`;
